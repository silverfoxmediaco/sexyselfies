const mongoose = require('mongoose');

const creatorContentSchema = new mongoose.Schema({
  creator: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Creator',
    required: true,
    index: true
  },
  
  creatorProfile: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'CreatorProfile',
    required: true
  },
  
  // CONTENT BASICS
  title: {
    type: String,
    maxlength: 100,
    index: 'text'
  },
  
  caption: {
    type: String,
    maxlength: 500
  },
  
  type: {
    type: String,
    enum: ['image', 'video', 'gallery', 'story', 'live', 'audio', 'text', 'poll', 'bundle'],
    required: true
  },
  
  // MEDIA INFORMATION
  media: {
    primary: {
      url: {
        type: String,
        required: true
      },
      thumbnailUrl: String,
      blurredUrl: String, // For preview
      cdnUrl: String, // Optimized CDN version
      fileSize: Number,
      dimensions: {
        width: Number,
        height: Number
      },
      duration: Number, // For video/audio in seconds
      mimeType: String,
      metadata: {
        camera: String,
        location: String,
        takenAt: Date
      }
    },
    
    additional: [{
      url: String,
      thumbnailUrl: String,
      blurredUrl: String,
      type: String,
      order: Number,
      fileSize: Number,
      dimensions: {
        width: Number,
        height: Number
      }
    }],
    
    processing: {
      status: {
        type: String,
        enum: ['pending', 'processing', 'completed', 'failed'],
        default: 'pending'
      },
      versions: [{
        quality: String, // '1080p', '720p', '480p'
        url: String,
        fileSize: Number
      }],
      aiProcessing: {
        completed: Boolean,
        processedAt: Date
      }
    }
  },
  
  // AI-POWERED FEATURES (Backend WOW Factor)
  aiAnalysis: {
    tags: [{
      tag: String,
      confidence: Number,
      category: String // 'style', 'mood', 'clothing', 'setting', 'activity'
    }],
    
    contentQuality: {
      score: {
        type: Number,
        min: 0,
        max: 100
      },
      factors: {
        lighting: Number,
        composition: Number,
        clarity: Number,
        uniqueness: Number,
        engagement: Number
      },
      suggestions: [String] // AI improvement suggestions
    },
    
    safetyScore: {
      appropriate: Boolean,
      nudityLevel: {
        type: Number,
        min: 0,
        max: 10
      },
      violenceLevel: Number,
      suggestivenessLevel: Number,
      flags: [String]
    },
    
    predictedPerformance: {
      estimatedViews: Number,
      estimatedEarnings: Number,
      estimatedEngagement: Number,
      confidence: Number,
      optimalPostTime: Date,
      reasoning: String
    },
    
    autoGeneratedTags: [String],
    suggestedHashtags: [String],
    suggestedCaption: String,
    
    similarContent: [{
      contentId: mongoose.Schema.Types.ObjectId,
      similarity: Number,
      performance: {
        views: Number,
        earnings: Number
      }
    }],
    
    faceDetection: [{
      boundingBox: {
        x: Number,
        y: Number,
        width: Number,
        height: Number
      },
      confidence: Number,
      emotions: {
        happy: Number,
        neutral: Number,
        surprised: Number
      }
    }],
    
    colorPalette: [{
      hex: String,
      percentage: Number,
      name: String
    }],
    
    mood: {
      primary: String, // 'playful', 'sexy', 'elegant', 'casual', 'artistic'
      secondary: String,
      confidence: Number
    }
  },
  
  // MONETIZATION (UX/UI WOW Factor)
  pricing: {
    strategy: {
      type: String,
      enum: ['fixed', 'dynamic', 'auction', 'tiered', 'pay-what-you-want'],
      default: 'fixed'
    },
    
    basePrice: {
      type: Number,
      required: true,
      min: 0.99,
      max: 999.99
    },
    
    currentPrice: Number, // Can change with dynamic pricing
    
    tiers: [{
      name: String,
      price: Number,
      benefits: [String],
      limitedQuantity: Number,
      soldCount: Number
    }],
    
    discounts: [{
      code: String,
      percentage: Number,
      validUntil: Date,
      usageLimit: Number,
      usedCount: Number,
      eligibleUsers: [mongoose.Schema.Types.ObjectId]
    }],
    
    bundleDeals: [{
      withContent: [mongoose.Schema.Types.ObjectId],
      bundlePrice: Number,
      savings: Number,
      validUntil: Date
    }],
    
    tips: {
      enabled: {
        type: Boolean,
        default: true
      },
      received: [{
        from: mongoose.Schema.Types.ObjectId,
        amount: Number,
        message: String,
        date: Date
      }],
      total: {
        type: Number,
        default: 0
      }
    }
  },
  
  // ENGAGEMENT TRACKING (Backend WOW Factor)
  engagement: {
    views: {
      total: {
        type: Number,
        default: 0
      },
      unique: {
        type: Number,
        default: 0
      },
      authenticated: {
        type: Number,
        default: 0
      },
      anonymous: {
        type: Number,
        default: 0
      },
      duration: {
        average: Number,
        total: Number
      },
      heatmap: [{
        timestamp: Number,
        count: Number
      }]
    },
    
    purchases: {
      count: {
        type: Number,
        default: 0
      },
      users: [{
        userId: mongoose.Schema.Types.ObjectId,
        purchasedAt: Date,
        price: Number,
        method: String
      }],
      conversionRate: Number
    },
    
    likes: {
      count: {
        type: Number,
        default: 0
      },
      users: [mongoose.Schema.Types.ObjectId]
    },
    
    saves: {
      count: {
        type: Number,
        default: 0
      },
      users: [mongoose.Schema.Types.ObjectId]
    },
    
    shares: {
      count: {
        type: Number,
        default: 0
      },
      platforms: [{
        platform: String,
        count: Number
      }]
    },
    
    comments: [{
      user: mongoose.Schema.Types.ObjectId,
      text: String,
      timestamp: Date,
      likes: Number,
      replies: [{
        user: mongoose.Schema.Types.ObjectId,
        text: String,
        timestamp: Date
      }]
    }],
    
    reactions: [{
      type: String, // '‚ù§Ô∏è', 'üî•', 'üòç', 'üí¶', 'ü•µ'
      count: Number,
      users: [mongoose.Schema.Types.ObjectId]
    }],
    
    reportFlags: [{
      reporter: mongoose.Schema.Types.ObjectId,
      reason: String,
      timestamp: Date,
      resolved: Boolean
    }]
  },
  
  // PERFORMANCE ANALYTICS (MERN WOW Factor)
  analytics: {
    revenueGenerated: {
      type: Number,
      default: 0
    },
    
    roi: {
      type: Number,
      default: 0
    },
    
    performanceScore: {
      type: Number,
      min: 0,
      max: 100
    },
    
    trending: {
      isCurrentlyTrending: Boolean,
      trendingRank: Number,
      trendingCategory: String,
      trendStarted: Date,
      peakRank: Number
    },
    
    demographics: {
      viewerAge: [{
        range: String,
        percentage: Number
      }],
      viewerGender: [{
        gender: String,
        percentage: Number
      }],
      viewerLocation: [{
        country: String,
        city: String,
        percentage: Number
      }],
      viewerDevice: [{
        type: String,
        percentage: Number
      }]
    },
    
    timeline: [{
      date: Date,
      views: Number,
      purchases: Number,
      earnings: Number,
      engagement: Number
    }],
    
    comparison: {
      vsCreatorAverage: {
        views: Number, // percentage
        earnings: Number,
        engagement: Number
      },
      vsSimilarContent: {
        percentile: Number,
        rank: Number,
        totalCompared: Number
      }
    }
  },
  
  // DISTRIBUTION & SCHEDULING (UX WOW Factor)
  distribution: {
    visibility: {
      type: String,
      enum: ['public', 'subscribers', 'premium', 'private', 'scheduled'],
      default: 'subscribers'
    },
    
    scheduling: {
      publishAt: Date,
      expiresAt: Date,
      timezone: String
    },
    
    exclusivity: {
      isExclusive: Boolean,
      exclusiveUntil: Date,
      exclusiveFor: [mongoose.Schema.Types.ObjectId] // VIP members
    },
    
    geoblocking: {
      enabled: Boolean,
      allowedCountries: [String],
      blockedCountries: [String]
    },
    
    crossPosting: {
      enabled: Boolean,
      platforms: [{
        name: String,
        posted: Boolean,
        postId: String,
        performance: {
          views: Number,
          engagement: Number
        }
      }]
    }
  },
  
  // SEO & DISCOVERY (Backend WOW Factor)
  seo: {
    metaTitle: String,
    metaDescription: String,
    keywords: [String],
    canonicalUrl: String,
    ogImage: String,
    structuredData: mongoose.Schema.Types.Mixed
  },
  
  discovery: {
    searchRank: Number,
    exploreRank: Number,
    categoryRank: Number,
    tags: [String],
    categories: [String],
    collections: [String]
  },
  
  // INTERACTIVE FEATURES (UI WOW Factor)
  interactive: {
    poll: {
      question: String,
      options: [{
        text: String,
        votes: Number,
        voters: [mongoose.Schema.Types.ObjectId]
      }],
      endsAt: Date
    },
    
    countdown: {
      enabled: Boolean,
      eventName: String,
      endsAt: Date
    },
    
    callToAction: {
      enabled: Boolean,
      type: String, // 'tip', 'subscribe', 'message', 'custom'
      text: String,
      link: String
    },
    
    unlockable: {
      hasHiddenContent: Boolean,
      unlockPrice: Number,
      unlockMessage: String,
      unlockedBy: [mongoose.Schema.Types.ObjectId]
    }
  },
  
  // VERSION CONTROL
  versions: [{
    versionNumber: Number,
    changes: String,
    editedAt: Date,
    editedBy: mongoose.Schema.Types.ObjectId,
    media: mongoose.Schema.Types.Mixed
  }],
  
  // STATUS & MODERATION
  status: {
    state: {
      type: String,
      enum: ['draft', 'published', 'archived', 'removed', 'under_review'],
      default: 'published'
    },
    
    moderation: {
      approved: Boolean,
      approvedBy: mongoose.Schema.Types.ObjectId,
      approvedAt: Date,
      rejectionReason: String
    },
    
    flags: {
      isNSFW: Boolean,
      isPremium: Boolean,
      isPromoted: Boolean,
      isFeatured: Boolean,
      isSticky: Boolean
    }
  },
  
  // METADATA
  metadata: {
    uploadedFrom: {
      device: String,
      app: String,
      ip: String,
      location: {
        country: String,
        city: String
      }
    },
    
    fileHash: String, // For duplicate detection
    originalFileName: String,
    
    processingTime: Number, // milliseconds
    
    notes: String, // Creator's private notes
    
    customFields: mongoose.Schema.Types.Mixed
  }
}, {
  timestamps: true
});

// INDEXES for performance
creatorContentSchema.index({ creator: 1, createdAt: -1 });
creatorContentSchema.index({ 'aiAnalysis.tags.tag': 1 });
creatorContentSchema.index({ 'analytics.revenueGenerated': -1 });
creatorContentSchema.index({ 'engagement.views.total': -1 });
creatorContentSchema.index({ 'analytics.trending.isCurrentlyTrending': 1 });
creatorContentSchema.index({ title: 'text', caption: 'text' });
creatorContentSchema.index({ 'status.state': 1, 'distribution.visibility': 1 });
creatorContentSchema.index({ 'pricing.currentPrice': 1 });
creatorContentSchema.index({ 'distribution.scheduling.publishAt': 1 });

// METHODS
creatorContentSchema.methods.calculateROI = function() {
  if (this.analytics.revenueGenerated === 0) return 0;
  // Assuming some base cost for content creation
  const baseCost = 10; // Could be dynamic based on content type
  return ((this.analytics.revenueGenerated - baseCost) / baseCost) * 100;
};

creatorContentSchema.methods.calculateEngagementRate = function() {
  const views = this.engagement.views.total || 1;
  const interactions = (this.engagement.likes.count || 0) + 
                      (this.engagement.saves.count || 0) + 
                      (this.engagement.shares.count || 0) +
                      (this.engagement.comments.length || 0);
  return (interactions / views) * 100;
};

creatorContentSchema.methods.updatePerformanceScore = function() {
  const engagementRate = this.calculateEngagementRate();
  const conversionRate = this.engagement.purchases.conversionRate || 0;
  const roi = this.calculateROI();
  
  // Weighted score calculation
  this.analytics.performanceScore = Math.min(100, 
    (engagementRate * 0.3) + 
    (conversionRate * 0.4) + 
    (Math.min(roi / 10, 30) * 0.3)
  );
};

creatorContentSchema.methods.shouldTriggerDynamicPricing = function() {
  // Check if content is performing exceptionally well
  const highDemand = this.engagement.views.total > 1000 && 
                     this.engagement.purchases.conversionRate > 0.1;
  const trending = this.analytics.trending.isCurrentlyTrending;
  
  return highDemand || trending;
};

creatorContentSchema.methods.getOptimalPrice = function() {
  if (!this.shouldTriggerDynamicPricing()) {
    return this.pricing.basePrice;
  }
  
  // Dynamic pricing algorithm
  const demandMultiplier = Math.min(2, 1 + (this.engagement.views.total / 5000));
  const conversionBonus = this.engagement.purchases.conversionRate * 10;
  
  return Math.min(
    this.pricing.basePrice * demandMultiplier + conversionBonus,
    999.99 // Max price cap
  );
};

// VIRTUALS
creatorContentSchema.virtual('isViral').get(function() {
  return this.engagement.views.total > 10000 || 
         this.engagement.shares.count > 500 ||
         this.analytics.trending.isCurrentlyTrending;
});

creatorContentSchema.virtual('earningsPerView').get(function() {
  if (this.engagement.views.total === 0) return 0;
  return this.analytics.revenueGenerated / this.engagement.views.total;
});

// HOOKS
creatorContentSchema.pre('save', async function(next) {
  // Update performance metrics before saving
  this.updatePerformanceScore();
  
  // Update ROI
  this.analytics.roi = this.calculateROI();
  
  // Check for dynamic pricing
  if (this.pricing.strategy === 'dynamic') {
    this.pricing.currentPrice = this.getOptimalPrice();
  }
  
  next();
});

module.exports = mongoose.model('CreatorContent', creatorContentSchema);